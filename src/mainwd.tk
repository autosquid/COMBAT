package require Tk
package require Img

update

global filename
global ::imgw
global ::imgh

set filename "sofa.png"
image create photo imgobj -file $filename

set ::imgw [image width imgobj]
set ::imgh [image height imgobj]

set ::winw 800
set ::winh 600

ttk::frame .f -width $::winw -height $::winh

grid .f -column 0 -row 0 -sticky nsew
grid columnconfigure . 0 -weight 1
grid rowconfigure . 0 -weight 1
grid rowconfigure .f 0 -weight 1
grid columnconfigure .f 0 -weight 1

canvas .f.l -width $::winw -height $::winh

grid .f.l -column 0 -row 0 -sticky nsew
set imid [.f.l create image 0 0 -image imgobj -anchor nw]

bind .f.l <Configure> {
    puts "====="

    set w [expr [winfo width .f.l]]
    set h [expr [winfo heigh .f.l]]

    exec convert $filename -resize [set w]x[set h] -background lightgray -gravity center -extent [set w]x[set h] newfile
    imgobj read newfile -shrink

    set nw %w/2
    set nh %h/2

    puts [winfo geometry .]
    puts [winfo geometry .f]
    puts [winfo geometry .f.l]

    puts [.f.l cget -width]
    puts [.f.l cget -height]
    puts [image width imgobj]
    puts [image height imgobj]
}

set ptarray {}

proc save_array {ptfilename} {
    global filename
    global ptarray

    set fo [open $ptfilename w]
    puts $fo $filename
    puts $fo $ptarray
    close $fo
}

proc getscale {ww wh} {
    global ::imgw
    global ::imgh

    set s [expr min($ww/$::imgw, $wh/$::imgh)]
    return $s
}

proc win2im {x y ww wh} {
    global ::imgw
    global ::imgh

    set s [getscale $ww $wh]

    set cx [expr $x-$ww/double(2)]
    set cy [expr $y-$wh/2]

    set ix [expr {$cx/$s+$::imgw/2}]
    set iy [expr {$cy/$s+$::imgw/2}]

    return [list $ix $iy]
}

proc im2win {x  y  ww  wh} {
    set s [getscale $ww $wh]
    set imcx $x-$::imw/2
    set imcy $y-$::imh/2
    set simcx $imcx*s
    set simcy $imcy*s
    set w {$simcx+$ww/2 $simcy+$wh/2}
    return $w
}

bind . <Key> {
    if {"%K" == "S" || "%K"== "s"} then {
            set savefilename [tk_getSaveFile]
            save_array $savefilename
            set ptarray {}
    }
}

bind . <Key-q> {
    if {[llength $ptarray]>0} then {
            set answer [tk_messageBox -message "Really quit?" \
                        -icon question -type yesno \
                        -detail "Select \"Yes\" to make the application exit"]
            if {$answer == yes} then { exit }
    }
}

bind . <Key-r> {
    set ptarray {}
    update
}


bind . <Key-o> {
    set filename [tk_getOpenFile]
    update
}

bind . <Key-u> {
    set L [llength $ptarray]
    lreplace $ptarray $L-2 $L-1
    update
}

proc findfile {} {
    set imdir [file dirname $filename]
    set bname [file tail $filename]
    set L [string length bname]
    set suffix [string range $bname $L-4 $L-1]
    set regex  "*."+$suffix
    filelist [glob -directory $imdir $regex]
    set index [lsearch $filelist $bname]

    return $index
}

bind . <Key-n> {
    set index [findfile]
    if {$index>0 && $index < [llength $filelist]-1} then {
        set filename [file join $imdir [lindex $filelist $index+1]]
        update
    }
}

bind . <Key-p> {
    set index [findfile]
    if {$index>1} then {
        set filename [file join $imdir [lindex $filelist $index-1]]
        update
    }
}

bind .f.l <ButtonRelease-1> {
    global ptarray

    puts stdout "mouse button released: (%x,%y)"
    .f.l create rectangle [expr %x-2] [expr %y-2] [expr %x+2] [expr %y+2]

    set w [.f.l cget -width]
    set h [.f.l cget -height]

    set impt [win2im %x %y $w  $h ]
    puts stdout $impt

    lappend ptarray [lindex $impt 0] [lindex $impt 1]
    puts stdout $ptarray
}

bind .f.l <ButtonRelease-2> {
    puts stdout "mouse button 2 released: (%x,%y)"
}
